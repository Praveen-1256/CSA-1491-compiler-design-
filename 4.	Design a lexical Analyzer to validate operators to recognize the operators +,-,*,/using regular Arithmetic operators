#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_TOKEN_LENGTH 100
enum TokenType {
    OPERATOR
};
struct Token {
    enum TokenType type;
    char value[MAX_TOKEN_LENGTH + 1];
};
const char *operator_pattern = "[\\+\\-\\*/]";
struct Token *tokenize(const char *source_code) {
    struct Token *tokens = malloc(sizeof(struct Token) * strlen(source_code));
    int token_count = 0;
    
    const char *p = source_code;
    while (*p != '\0') {
        if (isspace(*p)) {
            p++;
            continue;
        }
        regex_t regex;
        regmatch_t match;
        if (regcomp(&regex, operator_pattern, REG_EXTENDED) != 0) {
            fprintf(stderr, "Error compiling regex\n");
            exit(1);
        }
        int result = regexec(&regex, p, 1, &match, 0);
        regfree(&regex);
        if (result == 0) {
            size_t match_len = match.rm_eo - match.rm_so;
            char *token_value = malloc(match_len + 1);
            strncpy(token_value, p + match.rm_so, match_len);
            token_value[match_len] = '\0';
            
            struct Token token = { OPERATOR, {0} };
            strncpy(token.value, token_value, MAX_TOKEN_LENGTH);
            free(token_value);
            
            tokens[token_count++] = token;
            
            p += match.rm_eo;
        } else {
            fprintf(stderr, "Unrecognized token: %c\n", *p);
            exit(1);
        }
    }
    
    tokens[token_count] = (struct Token) { 0, {0} };
    
    return tokens;
}

int main() {
    const char *source_code = "x = y + z - a * b / c;";
    struct Token *tokens = tokenize(source_code);
    
    for (int i = 0; tokens[i].type != 0; i++) {
        printf("%s\n", tokens[i].value);
    }
    
    free(tokens);
    
    return 0;
}
